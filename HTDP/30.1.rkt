#lang racket
;; 这一小节介绍了如何用一般的思路来设计算法

;; 1,对于一个问题的描述,首先我们要确定合理的数据结构(呈现数据的方式)
;; 2,写下大致的函数的头,申明他们的功能,并且是如何得到结果的
;; 3,理一个程序使如何计算的是非常重要的,他可以让你更加深入的理解你的代码,也可以让未来的代码的阅读者们更加容易理解这份代码
;; 4,对于一个通用的算法来说,我们的设计分为两部分"trivially solvable"以及其他的部分
;; 对于此,我的理解如下,一个通用算法通常要考虑所面对的情况,有些是琐碎和边界情况,或者叫做特殊情况
;; 另外一些是通常情况.对于特使的条件特殊处理,一般情况一般处理然后把所有的通用情况合并起来就得到了所有通常情况的合解


;; 基于以上的认识,所有的算法都可以大致的如下处理

;; (define (通用问题求解函数  问题)
  ;; (cond
    ;; [(特殊问题吗? 问题) (特殊求解 问题)]
    ;; [else
      ;; (合并解
        ;; ....问题....
        ;; (通用问题求解函数 (问题的第一方面 问题))
        ;; .....
        ;; (通用问题求解函数 (问题的第N方面  问题)))]))
